unit TestAddresModuleDAO;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, FireDAC.Stan.Option, FireDAC.DApt.Intf, FireDAC.DatS,
  FireDAC.Stan.Async, FireDAC.Stan.Def, FireDAC.Stan.Param, System.Classes,
  FireDAC.Stan.Intf, FireDAC.Stan.Error, AddresModuleDAO, FireDAC.Phys.PG,
  FireDAC.Phys.PGDef, System.SysUtils, FireDAC.Phys.Intf, FireDAC.Comp.Client,
  FireDAC.VCLUI.Wait, FireDAC.Phys, FireDAC.Stan.Pool, Vcl.Dialogs,
  System.Generics.Collections, FireDAC.DApt, FireDAC.UI.Intf, Data.DB, AddressClass,
  FireDAC.Comp.DataSet,FireDAC.Phys.SQLite;

type
  // Test methods for class TAddressModule

  TestTAddressModule = class(TTestCase)
  strict private
    FAddressModule: TAddressModule;
    FTestConnection: TFDConnection;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestconnectDatabase;
    procedure TestinitialTables_create;
    procedure TestinsertAddress;
    procedure TestupdateAddress;
  //  procedure TestlistByUf;
  end;

implementation

procedure TestTAddressModule.SetUp;
begin

  FTestConnection := TFDConnection.Create(nil);
  FTestConnection.DriverName:= 'SQLite';
  FTestConnection.Params.Values['Database'] := 'D:\Divino\Software\TecnoSpeed Teste\New back-end\cep_manager\Test\dbteste\banco_de_teste.db';
  FTestConnection.Connected := True;

  FAddressModule := TAddressModule.Create (nil, FTestConnection);
  if not Assigned(FAddressModule) then
  Fail('Falha ao criar a instância de FAddressModule.');


  FAddressModule.InjectConnection := FTestConnection;
  //FAddressModule.initialTables_create;

end;

procedure TestTAddressModule.TearDown;
begin
  if Assigned(FTestConnection) then
  begin

  try
    if FileExists('C:\caminho\para\seu\banco_de_teste.db') then
      DeleteFile('C:\caminho\para\seu\banco_de_teste.db');
  except
    on E: Exception do
      // Lide com erros de exclusão, se necessário
      ShowMessage('Erro ao excluir arquivo de banco de dados: ' + E.Message);
  end;

    FTestConnection.Connected := False;
    FTestConnection.Free;
  end;
  FAddressModule.Free;
  FAddressModule := nil;
end;

procedure TestTAddressModule.TestconnectDatabase;
begin

  Check(FAddressModule.Injectconnection.Connected, 'A conexão com o banco de dados falhou.');
end;

procedure TestTAddressModule.TestinitialTables_create;
begin
  FAddressModule.initialTables_create;
  // TODO: Validate method results
end;

procedure TestTAddressModule.TestinsertAddress;
var
  ReturnValue: Boolean;
  AEndereco: TAdrressClass;
  Query: TFDQuery;
begin

 AEndereco := TAdrressClass.Create('12345-678', 'Rua de Teste', 'Complemento Teste', 'Bairro Teste',
    'Cidade Teste', 'TT', '1234567', '', '99', '9876');

  ReturnValue :=  FAddressModule.insertAddress(AEndereco);

  {Query := TFDQuery.Create(nil);
  try
    Query.Connection := FAddressModule.Injectconnection;
    Query.SQL.Text := 'INSERT INTO TspdCep (Cep, Logradouro, Complemento, Bairro, Localidade, Uf, Ibge, Gia, Ddd, Siafi) VALUES (:Cep, :Logradouro, :Complemento, :Bairro, :Localidade, :Uf, :Ibge, :Gia, :Ddd, :Siafi);'; // Adapte sua tabela e campos
    Query.ParamByName('Cep').AsString := '99999-999';
    Query.ParamByName('Logradouro').AsString := 'Rua Existente';
    Query.ParamByName('Complemento').AsString := 'MURO AMARELO';
    Query.ParamByName('Bairro').AsString := 'Centro';
    Query.ParamByName('Localidade').AsString := 'Cidade Exemplo';
    Query.ParamByName('Uf').AsString := 'GO';
    Query.ParamByName('Ibge').AsString := '1234567';
    Query.ParamByName('Gia').AsString := '';
    Query.ParamByName('Ddd').AsString := '';
    Query.ParamByName('Siafi').AsString := '9876';

    Query.ExecSQL;
    ReturnValue := True;

  except
    on E: Exception do
      begin

        ShowMessage('Falha ao salvar endereço ' + E.Message);
        ReturnValue := False;
      end;
  end;

  ReturnValue := FAddressModule.insertAddress(AEndereco);
  CheckTrue(ReturnValue, 'A inserção do endereço falhou.');
    }

end;

procedure TestTAddressModule.TestupdateAddress;
var
  ReturnValue: Boolean;
  AEndereco: TAdrressClass;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAddressModule.updateAddress(AEndereco);
  // TODO: Validate method results
end;

{procedure TestTAddressModule.TestlistByUf;
var
  ReturnValue: TList<>;
  AUf: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAddressModule.listByUf(AUf);
  // TODO: Validate method results
end;      }

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAddressModule.Suite);
end.

