unit TestAddresModuleDAO;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, FireDAC.Stan.Option, FireDAC.DApt.Intf, FireDAC.DatS,
  FireDAC.Stan.Async, FireDAC.Stan.Def, FireDAC.Stan.Param, System.Classes,
  FireDAC.Stan.Intf, FireDAC.Stan.Error, AddresModuleDAO, FireDAC.Phys.PG,
  FireDAC.Phys.PGDef, System.SysUtils, FireDAC.Phys.Intf, FireDAC.Comp.Client,
  FireDAC.VCLUI.Wait, FireDAC.Phys, FireDAC.Stan.Pool, Vcl.Dialogs,
  System.Generics.Collections, FireDAC.DApt, FireDAC.UI.Intf, Data.DB, AddressClass,
  FireDAC.Comp.DataSet,FireDAC.Phys.SQLite;

type

  TestTAddressModule = class(TTestCase)

  strict private
    FAddressModule: TAddressModule;
    FTestConnection: TFDConnection;

  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    procedure TestconnectDatabase;
    procedure TestinitialTables_create;
    procedure TestinsertAddress;
    procedure TestupdateAddress;
    procedure TestlistByUf;
  end;

implementation

procedure TestTAddressModule.SetUp;
var
    Query: TFDQuery;
begin

  FTestConnection := TFDConnection.Create(nil);
  FTestConnection.DriverName:= 'SQLite';
  FTestConnection.Params.Values['Database'] := 'D:\Divino\Software\TecnoSpeed Teste\New back-end\cep_manager\Test\dbteste\banco_de_teste.db';
  FTestConnection.Connected := True;

  FAddressModule := TAddressModule.Create (nil, FTestConnection);

  if not Assigned(FAddressModule) then
  Fail('Falha ao criar a instância de FAddressModule.');

  FAddressModule.InjectConnection := FTestConnection;

    try Query := TFDQuery.Create(nil);

      Query.Connection := FAddressModule.InjectConnection;
      Query.SQL.Text := 'DELETE FROM TspdCep;';
      Query.ExecSQL;
      except
       on E: Exception do
       begin
         ShowMessage('Test - Erro ao apagar tabela TspdCep ')
       end;
    end;
end;

procedure TestTAddressModule.TearDown;
begin
  if Assigned(FTestConnection) then
  begin

  try
    if FileExists('D:\Divino\Software\TecnoSpeed Teste\New back-end\cep_manager\Test\dbteste\banco_de_teste.db') then
      DeleteFile('D:\Divino\Software\TecnoSpeed Teste\New back-end\cep_manager\Test\dbteste\banco_de_teste.db');
  except
    on E: Exception do
      ShowMessage('Erro ao excluir arquivo de banco de dados: ' + E.Message);
  end;

    FTestConnection.Connected := False;
    FTestConnection.Free;
  end;
  FAddressModule.Free;
  FAddressModule := nil;
end;

procedure TestTAddressModule.TestconnectDatabase;
begin
  Check(FAddressModule.Injectconnection.Connected, 'A conexão com o banco de dados falhou.');
end;


procedure TestTAddressModule.TestinitialTables_create;
var
  Query: TFDQuery;
  TableExists: Boolean;
begin

  if not FTestConnection.Connected then
    FTestConnection.Connected := True;

  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FTestConnection;

    Query.SQL.Text :=
      'SELECT name FROM sqlite_master WHERE type=''table'' AND name=''TspdCep'';';
    Query.Open();

    TableExists := not Query.IsEmpty;
  finally
    Query.Free;
  end;

  CheckTrue(TableExists, 'Falha ao verificar a criação da tabela TspdCep.');
end;

procedure TestTAddressModule.TestinsertAddress;
var
  ReturnValue: Boolean;
  AEndereco: TAddressClass;
begin

 AEndereco := TAddressClass.Create('12345-678', 'Rua de Teste', 'Complemento Teste', 'Bairro Teste',
    'Cidade Teste', 'TT', '1234567', '', '99', '9876');

  ReturnValue :=  FAddressModule.insertAddress(AEndereco);
  CheckTrue(ReturnValue, 'A inserção do endereço falhou.');

end;

procedure TestTAddressModule.TestupdateAddress;
var
  ReturnValue: Boolean;
  AEndereco: TAddressClass;
     begin

 AEndereco := TAddressClass.Create('12345-678', 'Rua de Teste Atualiza', 'Complemento Teste Atualizado', 'Bairro Teste Atualizado',
    'Cidade Teste Atualizada', 'TT', '1234567', '', '99', '9876');
    ReturnValue:= FAddressModule.updateAddress(AEndereco);
    CheckTrue(ReturnValue,' Update dos valores teste falou.');
end;

procedure TestTAddressModule.TestlistByUf;
var
  ReturnList: TList<TAddressClass>;
  Address1, Address2, Address3: TAddressClass;
  Address: TAddressClass;
  UFTestada: string;
  countAddressUf: Integer;
  i: Integer;
begin

  FAddressModule.initialTables_create;
  UFTestada := 'SP';

  Address1 := TAddressClass.Create('01234-567', 'Avenida Paulista', 'Conjunto 123', 'Bela Vista',
    'São Paulo', UFTestada, '3550308', '', '11', '7107');
  FAddressModule.insertAddress(Address1);

  Address2 := TAddressClass.Create('04567-890', 'Rua Oscar Freire', 'Loja 10', 'Jardins',
    'São Paulo', UFTestada, '3550308', '', '11', '7107');
  FAddressModule.insertAddress(Address2);

  Address3 := TAddressClass.Create('20000-000', 'Avenida Atlântica', 'Apto 500', 'Copacabana',
    'Rio de Janeiro', 'RJ', '3304557', '', '21', '6001');
  FAddressModule.insertAddress(Address3);

  ReturnList := FAddressModule.listByUf(UFTestada);
  try

    CheckNotNull(ReturnList, 'A lista retornada não pode ser nil');


    CheckEquals(2, ReturnList.Count, 'A lista deve conter exatamente 2 endereços com UF = ' + UFTestada);

    countAddressUf := 0;
    for i := 0 to ReturnList.Count - 1 do
    begin
      Address := ReturnList[i];
      if Address.Uf = UFTestada then
        Inc(countAddressUf);
    end;
    CheckEquals(ReturnList.Count, countAddressUf);
  finally;

  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAddressModule.Suite);
end.

