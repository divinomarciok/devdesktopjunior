unit AddresModuleDAO;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait,
  FireDAC.Phys.PGDef, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  FireDAC.Phys.PG,Vcl.Dialogs,AddressClass,System.Generics.Collections,
  FireDAC.Stan.ExprFuncs, FireDAC.Phys.SQLiteWrapper.Stat,
  FireDAC.Phys.SQLiteDef, FireDAC.Phys.SQLite;

type
  TAddressModule = class(TDataModule)
  ConnectDB: TFDConnection;
  FDPhysPgDriverLink: TFDPhysPgDriverLink;
  DBQuery: TFDQuery;

  private
  FInjectConnection: TFDConnection;
  public

  procedure connectDatabase;
  function initialTables_create():Boolean;
  function insertAddress(const AEndereco: TAdrressClass):Boolean;
  function updateAddress(const AEndereco:  TAdrressClass):Boolean;
  function listByUf(const AUf: string): TList<TAdrressClass>;

  constructor Create(AOwner: TComponent; AConnection: TFDConnection = nil);
  property InjectConnection : TFDConnection read FInjectConnection write FInjectConnection;

  end;

var
  AddressModule: TAddressModule;

implementation

constructor TAddressModule.Create(AOwner: TComponent; AConnection: TFDConnection = nil);
begin
  inherited Create(AOwner);
  FInjectConnection := AConnection;
end;


procedure TAddressModule.connectDatabase;
begin
try
      ConnectDB.DriverName := 'PG';
      ConnectDB.Params.Database := 'EnderecosViaCep';
      ConnectDB.Params.UserName := 'postgres';
      ConnectDB.Params.Password := 'postgres';
      ConnectDB.Params.Add('Server=localhost');
      ConnectDB.Params.Add('Port=5432');
      ConnectDB.Connected := True;


  except on E: Exception do
     ShowMessage('Falha ao connectar no banco >> '+ ConnectDB.Params.Database +'>> '+E.Message);
  end;
end;

function TAddressModule.initialTables_create:Boolean;
begin
 try
    DBQuery := TFDQuery.Create(nil);

    DBQuery.Connection := InjectConnection;
    if not Assigned(InjectConnection) then
      ShowMessage('Injectconnection is NIL!');

   DBQuery.SQL.Text :=
      'CREATE TABLE IF NOT EXISTS TspdCep  (' +
      'ID SERIAL PRIMARY KEY, ' +
      'cep VARCHAR(9) UNIQUE, ' +
      'logradouro VARCHAR(100), ' +
      'complemento VARCHAR(100), ' +
      'bairro VARCHAR(100), ' +
      'localidade VARCHAR(100), ' +
      'uf VARCHAR(2), ' +
      'ibge VARCHAR(7), ' +
      'gia VARCHAR(5), ' +
      'ddd VARCHAR(3), ' +
      'siafi VARCHAR(5)' +
      ')';

    DBQuery.ExecSQL;
    DBQuery.Close;

    //ShowMessage('Migration initial create "TspdCep" executada com sucesso!');
    Result:=true;
  except on E: Exception do
    ShowMessage('Erro ao criar tabelas' + E.Message);
    //
  end;
end;

function TAddressModule.insertAddress(const AEndereco: TAdrressClass): Boolean;
begin
  DBQuery := TFDQuery.Create(nil);
  try
    DBQuery.Connection := InjectConnection;
    DBQuery.SQL.Text := 'INSERT INTO TspdCep (cep, logradouro, complemento, bairro, localidade, uf, ibge, ddd) ' +
                       'VALUES (:cep, :logradouro, :complemento, :bairro, :localidade, :uf, :ibge, :ddd)';
    DBQuery.ParamByName('cep').AsString := AEndereco.Cep;
    DBQuery.ParamByName('logradouro').AsString := AEndereco.Logradouro;
    DBQuery.ParamByName('complemento').AsString := AEndereco.Complemento;
    DBQuery.ParamByName('bairro').AsString := AEndereco.Bairro;
    DBQuery.ParamByName('localidade').AsString := AEndereco.Localidade;
    DBQuery.ParamByName('uf').AsString := AEndereco.Uf;
    DBQuery.ParamByName('ibge').AsString := AEndereco.Ibge;
    DBQuery.ParamByName('ddd').AsString := AEndereco.Ddd;
    DBQuery.Execute();
    Result := True;
    DBQuery.Free;

  except
    on E: Exception do
      begin

        ShowMessage('Falha ao salvar endereço ' + E.Message);

        Result := False;
        DBQuery.Free;
      end;

  end;
end;


function TAddressModule.updateAddress(const AEndereco: TAdrressClass): Boolean;
  begin
  try
    DBQuery.Connection := ConnectDB;
    DBQuery.SQL.Text := 'UPDATE TspdCep SET logradouro = :logradouro, complemento = :complemento, bairro = :bairro, ' +
                       'localidade = :localidade, uf = :uf, ibge = :ibge, ddd = :ddd ' +
                       'WHERE cep = :cep';
    DBQuery.ParamByName('cep').AsString := AEndereco.Cep;
    DBQuery.ParamByName('logradouro').AsString := AEndereco.Logradouro;
    DBQuery.ParamByName('complemento').AsString := AEndereco.Complemento;
    DBQuery.ParamByName('bairro').AsString := AEndereco.Bairro;
    DBQuery.ParamByName('localidade').AsString := AEndereco.Localidade;
    DBQuery.ParamByName('uf').AsString := AEndereco.Uf;
    DBQuery.ParamByName('ibge').AsString := AEndereco.Ibge;
    DBQuery.ParamByName('ddd').AsString := AEndereco.Ddd;
    DBQuery.Execute();
    Result := True;
  except
    on E: Exception do
      begin
        ShowMessage('Falha ao atualizar o CEP '+ E.Message);
        Result := False;
      end;
  end;
end;


function TAddressModule.listByUf(const AUf: string): TList<TAdrressClass>;
var

AddresObject : TAdrressClass;
ListAddress : TList<TAdrressClass>;

begin
  ListAddress := TList<TAdrressClass>.Create(nil);
  DBQuery.Connection := ConnectDB;
  DBQuery.SQL.Text := 'SELECT cep, logradouro, complemento, bairro, localidade, uf, ibge, ddd ' +
                     'FROM TspdCep WHERE uf = :uf';
  DBQuery.ParamByName('uf').AsString := AUf;
  DBQuery.Open();

  if not DBQuery.IsEmpty then
    begin
      DBQuery.First;
       while not DBQuery.Eof do
       begin

         AddresObject := TAdrressClass.Create(
         DBQuery.FieldByName('cep').AsString,
         DBQuery.FieldByName('logradouro').AsString,
         DBQuery.FieldByName('complemento').AsString,
         DBQuery.FieldByName('bairro').AsString,
         DBQuery.FieldByName('localidade').AsString,
         DBQuery.FieldByName('uf').AsString,
         DBQuery.FieldByName('ibge').AsString,
         DBQuery.FieldByName('gia').AsString,
         DBQuery.FieldByName('ddd').AsString,
         DBQuery.FieldByName('siafi').AsString
         );

         ListAddress.Add(AddresObject);
         DBQuery.Next;
       end;

    end
    else
    begin
      ShowMessage('Nenhum resultado de CEP para UF : '+AUf);
    end;

    Result:=ListAddress;
    DBQuery.Close;
end;


{$R *.dfm}

end.
