unit serviceApiCep;

interface
uses
System.SysUtils,System.Net.HttpClient,System.JSON,Dialogs,System.Generics.Collections,AddressClass;

type
TServiceApiCep = class

private

public

//function checkCep(const ACep: string): TAddressClass;
function fetchCep(const ACep: string): TAddressClass;
function JsonTemErroTrue(const AJSONValue: TJSONValue): Boolean;

end;

implementation


{function TServiceApiCep.checkCep(const ACep: string):TAddressClass;
var
HTTPClient: THTTPClient;
Response: IHTTPResponse;
JSONValue: TJSONValue;
URL: string;
JCep :string;
AddressObject: TAddressClass;

begin
     HTTPClient := THTTPClient.Create;
try
       URL :='https://viacep.com.br/ws/' + ACep + '/json';
       Response := HTTPClient.Get(URL);
       if Response.StatusCode = 200 then
        begin

          JSONValue := TJSONObject.ParseJSONValue(Response.ContentAsString);

          try

            if JSONValue <> nil then
            begin

             JCep := JSONValue.GetValue<string>('cep');

              AddressObject := TAddressClass.Create  (
                JSONValue.GetValue<string>('cep'),
                JSONValue.GetValue<string>('logradouro'),
                JSONValue.GetValue<string>('complemento'),
                JSONValue.GetValue<string>('bairro'),
                JSONValue.GetValue<string>('localidade'),
                JSONValue.GetValue<string>('uf'),
                JSONValue.GetValue<string>('ibge'),
                JSONValue.GetValue<string>('gia'),
                JSONValue.GetValue<string>('ddd'),
                JSONValue.GetValue<string>('siafi')
              );

              Result := AddressObject;

            end;

          finally
           JSONVAlue.Free;
          end;

        end
        else
        begin
          raise Exception.Create('Erro na consulta da API STATUS CODE >>  ' + IntToStr(Response.StatusCode));;
        end;
finally
    HTTPClient.Free;
end;
end;

}


function TServiceApiCep.fetchCep(const ACep: string):TAddressClass;
var

HTTPClient: THTTPClient;
Response: IHTTPResponse;
JSONValue: TJSONValue;
URL: string;
JCep :string;
AddressObject: TAddressClass;

begin
     HTTPClient := THTTPClient.Create;
    try
       URL :='https://viacep.com.br/ws/' + ACep + '/json';
       Response := HTTPClient.Get(URL);

       if Response.StatusCode = 200 then
        begin

        JSONValue := TJSONObject.ParseJSONValue(Response.ContentAsString);

            if JsonTemErroTrue(JSONValue) then
             begin
              ShowMessage('Numero de CEP Informado sem retorno na API : Não existe');
             end
             else
             begin

            JCep := JSONValue.GetValue<string>('cep');

              AddressObject := TAddressClass.Create  (
                JSONValue.GetValue<string>('cep'),
                JSONValue.GetValue<string>('logradouro'),
                JSONValue.GetValue<string>('complemento'),
                JSONValue.GetValue<string>('bairro'),
                JSONValue.GetValue<string>('localidade'),
                JSONValue.GetValue<string>('uf'),
                JSONValue.GetValue<string>('ibge'),
                JSONValue.GetValue<string>('gia'),
                JSONValue.GetValue<string>('ddd'),
                JSONValue.GetValue<string>('siafi')
              );

              Result := AddressObject;

             end;


        end;



  except
    on E: Exception do
      begin

      end;
  end;

end;

function TServiceApiCep.JsonTemErroTrue(const AJSONValue: TJSONValue): Boolean;
var
  JSONObject: TJSONObject;
  ErroValue: TJSONValue;
begin
  Result := False; // Assume que não tem erro por padrão
  if AJSONValue is TJSONObject then
  begin
    JSONObject := AJSONValue as TJSONObject;
    if JSONObject.TryGetValue('erro', ErroValue) then
    begin
      if (ErroValue is TJSONString) and (TJSONString(ErroValue).Value.ToLower = 'true') then
      begin
        Result := True; // Encontrou "erro": "true" (ou variações)
      end;
    end;
  end;
end;


end.
